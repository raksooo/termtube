{"version":3,"sources":["../src/videoRetriever.js"],"names":["parser","Parser","getVideos","then","parseAllSubscriptions","rssContentToVideoList","sortByDate","setSelected","subscriptions","promises","map","subscription","parseURL","catch","Promise","all","content","filter","feed","items","reduce","accumulator","current","concat","list","sort","a","b","Date","isoDate","getTime","mostRecent","video","moreRecent"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,MAAM,GAAG,IAAIC,kBAAJ,EAAf;;AAEO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,SAAO,uCACJC,IADI,CACCC,qBADD,EAEJD,IAFI,CAECE,qBAFD,EAGJF,IAHI,CAGCG,UAHD,EAIL;AAJK,GAKJH,IALI,CAKCI,WALD,CAAP;AAMD,CAPM;;;;AASP,IAAMH,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAI,aAAa,EAAI;AAC7C,MAAMC,QAAQ,GAAGD,aAAa,CAACE,GAAd,CAAkB,UAAAC,YAAY,EAAI;AACjD,WAAOX,MAAM,CAACY,QAAP,CAAgBD,YAAhB,EACJE,KADI,CACE;AAAA,aAAM,IAAN;AAAA,KADF,CAAP;AAED,GAHgB,CAAjB;AAKA,SAAOC,OAAO,CAACC,GAAR,CAAYN,QAAZ,CAAP;AACD,CAPD;;AASA,IAAMJ,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAW,OAAO,EAAI;AACvC,SAAOA,OAAO,CACXC,MADI,CACG,UAAAC,IAAI;AAAA,WAAIA,IAAI,IAAI,IAAZ;AAAA,GADP,EAEJR,GAFI,CAEA,UAAAQ,IAAI;AAAA,WAAIA,IAAI,CAACC,KAAT;AAAA,GAFJ,EAGJC,MAHI,CAGG,UAACC,WAAD,EAAcC,OAAd;AAAA,WAA0BD,WAAW,CAACE,MAAZ,CAAmBD,OAAnB,CAA1B;AAAA,GAHH,EAG0D,EAH1D,CAAP;AAID,CALD;;AAOA,IAAMhB,UAAU,GAAG,SAAbA,UAAa,CAAAkB,IAAI,EAAI;AACzB,SAAOA,IAAI,CAACC,IAAL,CAAU,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAU,IAAIC,IAAJ,CAASD,CAAC,CAACE,OAAX,EAAoBC,OAApB,KAAgC,IAAIF,IAAJ,CAASF,CAAC,CAACG,OAAX,EAAoBC,OAApB,EAA1C;AAAA,GAAV,CAAP;AACD,CAFD;;AAIA,IAAMvB,WAAW,GAAG,SAAdA,WAAc,CAAAiB,IAAI,EAAI;AAC1B,SAAO,oCACJrB,IADI,CACC,UAAA4B,UAAU;AAAA,WAAIP,IAAI,CAACd,GAAL,CAAS,UAAAsB,KAAK;AAAA,aAAK;AAAEA,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,UAAU,EAAEA,UAAU,CAACF,UAAD,EAAaC,KAAb;AAA/B,OAAL;AAAA,KAAd,CAAJ;AAAA,GADX,CAAP;AAED,CAHD;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACF,UAAD,EAAaC,KAAb,EAAuB;AACxC,SAAOD,UAAU,IAAI,IAAd,IAAsB,IAAIH,IAAJ,CAASI,KAAK,CAACH,OAAf,IAA0BE,UAAvD;AACD,CAFD","sourcesContent":["import Parser from 'rss-parser';\nimport { getSubscriptions, getMostRecent } from './configHandler';\nimport { log } from './log.js';\n\nconst parser = new Parser();\n\nexport const getVideos = () => {\n  return getSubscriptions()\n    .then(parseAllSubscriptions)\n    .then(rssContentToVideoList)\n    .then(sortByDate)\n    //.then(videos => videos.slice(0, 50))\n    .then(setSelected);\n};\n\nconst parseAllSubscriptions = subscriptions => {\n  const promises = subscriptions.map(subscription => {\n    return parser.parseURL(subscription)\n      .catch(() => null);\n  });\n\n  return Promise.all(promises);\n};\n\nconst rssContentToVideoList = content => {\n  return content\n    .filter(feed => feed != null)\n    .map(feed => feed.items)\n    .reduce((accumulator, current) => accumulator.concat(current), []);\n};\n\nconst sortByDate = list => {\n  return list.sort((a, b) => new Date(b.isoDate).getTime() - new Date(a.isoDate).getTime());\n};\n\nconst setSelected = list => {\n  return getMostRecent()\n    .then(mostRecent => list.map(video => ({ video, moreRecent: moreRecent(mostRecent, video) })));\n};\n\nconst moreRecent = (mostRecent, video) => {\n  return mostRecent == null || new Date(video.isoDate) > mostRecent\n}\n\n"],"file":"videoRetriever.js"}